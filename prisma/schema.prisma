generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Resume {
  id              String           @id @default(cuid())
  userId          String
  title           String?
  description     String?
  photoUrl        String?
  colorHex        String           @default("#000000")
  borderStyle     String           @default("squircle")
  summary         String?
  firstName       String?
  lastName        String?
  jobTitle        String?
  city            String?
  country         String?
  phone           String?
  email           String?
  githubProfile   String?
  linkedinProfile String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  custom          Custom[]
  codingProfiles  CodingProfile[]
  contests        Contests[]
  courses         Courses[]
  educations      Education[]
  projects        Projects[]
  skillSet        SkillSet[]
  workExperiences WorkExperience[]

  @@map("resumes")
}

model WorkExperience {
  id              String    @id @default(cuid())
  position        String?
  company         String?
  companyLocation String?
  startDate       DateTime?
  endDate         DateTime?
  description     String?
  resumeId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  resume          Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("work_experiences")
}

model Projects {
  id          String   @id @default(cuid())
  projectName String?
  link        String?
  techStack   String?
  description String?
  resumeId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String?
  cgpa      String?
  startDate DateTime?
  endDate   DateTime?
  resumeId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  resume    Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model SkillSet {
  id         String   @id @default(cuid())
  languages  String?
  frameworks String?
  tools      String?
  libraries  String?
  resumeId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  databases  String?
  deployment String?
  resume     Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("skillSet")
}

model Courses {
  id               String   @id @default(cuid())
  course           String?
  courseLink       String?
  resumeId         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  description      String?
  learningPlatform String?
  resume           Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("custom_courses")
}

model Contests {
  id              String   @id @default(cuid())
  contest         String?
  contestStanding String?
  resumeId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  description     String?
  resume          Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("custom_contests")
}

model CodingProfile {
  id                String   @id @default(cuid())
  codingProfile     String?
  codingProfileLink String?
  resumeId          String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  description       String?
  resume            Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("custom_codingProfiles")
}

model Custom {
  id          String   @id @default(cuid())
  heading     String?
  description String?
  link        String?
  resumeId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("custom")
}
